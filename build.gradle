import sun.font.BidiUtils

buildscript {
	ext.kotlin_version = '1.1.4' // Required for Kotlin integration
	ext.spring_boot_version = '1.5.4.RELEASE'
	ext.swagger_version = '2.6.1'

	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
		classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
		classpath("org.jooq:jooq-codegen:3.9.5")
		classpath("org.postgresql:postgresql:42.1.4")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
}


dependencies {
	compile("org.yaml:snakeyaml:1.10")
	compileOnly('org.projectlombok:lombok:1.16.18')
	compile('org.apache.commons:commons-lang3:3.4')
	compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
	runtime("org.springframework.boot:spring-boot-devtools")
	compile("org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion")
	compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
	compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
	compile("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
	//compile("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
	compile("io.springfox:springfox-swagger2:${swagger_version}")
	compile("io.springfox:springfox-swagger-ui:${swagger_version}")
	compile("com.google.code.gson:gson:2.7")
	compile("javax.inject:javax.inject:1")
	compile("org.jooq:jooq:3.9.5")

	compile("org.postgresql:postgresql:42.1.4")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("junit:junit")
	testCompile("org.dbunit:dbunit:2.5.2")
	testCompile("org.jboss.arquillian.extension:arquillian-persistence-dbunit:1.0.0.Alpha7") {
		exclude group: 'org.yaml'
	}
	testCompile("com.jayway.jsonpath:json-path")
	testCompile("com.jayway.jsonpath:json-path-assert")
}

task jooqDeleteStubs(type: org.gradle.api.tasks.Delete) {
	delete fileTree("src/main/java/br/com/nalone/jooqpoc/core/domain/jooq") {
		include '**/*.java'
	}
}

task jooqGenerateStubs(type: Wrapper) {
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
			.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.2.xsd') {

		jdbc() {
			driver('org.postgresql.Driver')
			url('jdbc:postgresql://localhost:5432/wallet')
			user('postgres')
			password('')
		}

		generator() {

			database() {
				name { mkp.yield('org.jooq.util.postgres.PostgresDatabase') }
				exclude("pg.*")
				inputSchema("public")
			}

			// Watch out for this caveat when using MarkupBuilder with "reserved names"
			// - https://github.com/jOOQ/jOOQ/issues/4797
			// - http://stackoverflow.com/a/11389034/521799
			// - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
			generate([:]) {
				pojos false
				daos false
			}

			target() {
				packageName('br.com.nalone.jooqpoc.core.domain.jooq')
				directory('src/main/java')
			}
		}
	}

	org.jooq.util.GenerationTool.generate(
			javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
	)
}
